AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for VPC - my first yaml file!!!'

Resources:
  # My VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '172.16.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC
  # Public Subnet in AZ 1
  PublicSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A
  # App Private Subnet in AZ 1
  AppPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.2.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A
  # Data Private Subnet in AZ 1
  DataPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataPrivateSubnet1A
  # Private Subnet in AZ 2
  PublicSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2B

  # App Private Subnet in AZ 2
  AppPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.5.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2B
  # Data Private Subnet in AZ 2
  DataPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.6.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2B
          
  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyVPC-IGW

  #Attach Internet Gateway to VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Routes
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Public Subnet 1A Route Table Associations
  PublicSubnet1ARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1A
      RouteTableId: !Ref PublicRouteTable

  # Public Subnet 2B Route Table Associations
  PublicSubnet2BRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2A
      RouteTableId: !Ref PublicRouteTable

#########################################################
# Load Balancer
#########################################################

# Application Load Balancer
MyLoadBalancer:
  Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
  Properties:
    Subnets:
      - !Ref PublicSubnet1A
      - !Ref PublicSubnet2B
    SecurityGroups:
      - !Ref WebServerSecurityGroup

# Target Group for ALB
MyTargetGroup:
  Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
  Properties:
    VpcId: !Ref MyVPC
    Port: 80
    Protocol: 'HTTP'

# Listener for ALB
MyListener:
  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  Properties:
    DefaultActions:
      - Type: 'forward'
        TargetGroupArn: !Ref MyTargetGroup
    LoadBalancerArn: !Ref MyLoadBalancer
    port: 80
    Protocol: 'HTTP'

# Security Group for WebServerInstances
WebServerSecurityGroup:
  Type: 'AWS::EC2::SecurityGroup'
  Properties:
    GroupDescription: 'Enable HTTP access'
    VpcId: !Ref MyVPC
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

# WebServerInstance1A
WebServerInstance1A::
  Type: 'AWS::EC2::Instance'
  Properties:
    InstanceType: 't2.micro'
    ImageId: ami-07b0c09aab6e66ee9
    SubnetId: !Ref PublicSubnet1A
    SecurityGroups:
      - !Ref WebServerSecurityGroup
    Tags:
      - Key: Name
        Value: WebServerInstance1A
    UserData:
      Fn:Base64: !Sub |
        #!/bin/bash
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo "<h1>Hello World from $(hostname -f) - TUTTLE </h1>" > /var/www/html/index.html

# WebServerInstance2B
WebServerInstance2B:
  Type: 'AWS::EC2::Instance'
  Properties:
    InstanceType: 't2.micro'
    ImageId: ami-07b0c09aab6e66ee9
    SubnetId: !Ref PublicSubnet2B
    SecurityGroups:
      - !Ref WebServerSecurityGroup
    Tags:
      - Key: Name
        Value: WebServerInstance2B
    UserData:
      Fn:Base64: !Sub |
        #!/bin/bash
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo "<h1>Hello World from $(hostname -f) - TUTTLE </h1>" > /var/www/html/index.html  
